import React from 'react';
import { StyleSheet, Text, View, TextInput} from 'react-native';
import * as firebase from 'firebase';
import 'firebase/firestore';
//import firebase from 'react-native-firebase';
import { Button } from 'react-native';
//make sure to install mathjs
import * as math from 'mathjs';

// Initialize Firebase
const firebaseConfig = {
  apiKey: "AIzaSyD2YhfO1TBYNOAWSxGwXQocAikqLuCRl7Q",
  authDomain: "testing-617da.firebaseapp.com",
  databaseURL: "https://testing-617da.firebaseio.com",
  projectId: "testing-617da",
  storageBucket: "testing-617da.appspot.com",
    //messagingSenderId: "862420802331"
};

firebase.initializeApp(firebaseConfig);
const db = firebase.firestore();
db.settings({ timestampsInSnapshots: true});


//my location class. This doesnt really work right now
export class location extends React.Component {
    constructor(address, longitude, lattitude, count) {
        this.address = address;
        this.longitude = longitude;
        this.lattitude = lattitude;
        this.count = count;
    }
};

export default class App extends React.Component {
    constructor(props) {
        super(props);
        this.state = { address: 'placeholder'};
        this.state = { count: 'placeholder'};
        this.state = { listening_location: 'placeholder'};
        this.state = { lattitude: 'placeholder'};
        this.state = { longitude: 'placeholder'};
        //this.state = { locations: [] };
    };

    //either stores a new location in the firebase collection or updates a current location
    storeAddress = (address,lat,long) => {
        console.log(long,lat)
        var updated = false;
        var time = new Date()
        var locations = []
        var ref = db.collection('locations').doc(address);
        var transaction = db.runTransaction(t = (event) => {
            return event.get(ref)
            .then(doc => {
                if (!doc.exists) {
                    ref.set({
                        count: 1,
                        timeCreated: time,
                        lattitude: lat,
                        longitude: long
                    });
                    updated = true;
                    let location_ = new location(doc.id, long, lat, 1);
                    locations = locations.concat(location_)
                }
                else if (updated == false) {
                  var newCount = doc.data().count +1;
                  event.update(ref, { count: newCount});
                  updated = true;
                };
            })
        })
        .catch(err => {
                console.log('Error getting document', err);
        })
    };

    //updates the on screen value of whichever location youre currently listening to
    updateCount = (address) => {
        var ref = db.collection('locations').doc(address)
        ref.get().then(doc => {
            console.log(math.abs(doc.data().longitude/10));
            if (math.abs(doc.data().longitude/10) > 1 || math.abs(doc.data().lattitude/10) >1/*doc.data().longitude/10 > 1 || doc.data().longitude/10 < -1 || doc.data().lattitude/10 > 1 || doc.data().lattitude/10 < -1*/){
                this.setState({count: "This location is too far away to listen to"})
            } else {
                this.setState({count: doc.data().count})
            }
            
        });

    }

  render() {
    return (
        <View style = {styles.container}>
            <Button
                onPress = {() =>this.storeAddress(this.state.address,this.state.lattitude,this.state.longitude)}
                title = "lit!"
                color = "red"
            />
            <View style={{flexDirection:"row"}}>
                <View style = {{flex:1}}>
                    <TextInput textAlign = "center" placeholder = "listening to" style = {{justifyContent: 'flex-start', borderColor: 'gray', borderWidth: 1, height: 40}}
                        onChangeText={(listening_location) => this.setState({listening_location})}
                        onSubmitEditing = { () => this.updateCount(this.state.listening_location)}
                    />
                </View>
            </View>
            <Text style = {styles.numberSize}>{this.state.count}</Text>
            <View style={{flexDirection:"row"}}>
                <View style = {{flex:1}}>
                    <TextInput textAlign = "center" placeholder = "voting on" style = {{justifyContent: 'flex-start', borderColor: 'gray', borderWidth: 1, height: 40}}
                        onChangeText={(address) => this.setState({address})}
                    />
                </View>
            </View>
            <View style={{flexDirection:"row"}}>
                <View style = {{flex:1}}>
                    <TextInput textAlign = "center" placeholder = "lat" style = {{justifyContent: 'flex-start', borderColor: 'gray', borderWidth: 1, height: 40}}
                        onChangeText = {(lattitude) => this.setState({lattitude})}
                    />
                </View>
                <View style={{flex:1}}>
                    <TextInput textAlign = "center" placeholder = "long"style={{justifyContent: 'flex-end', borderColor: 'gray', borderWidth: 1, height: 40}}
                        onChangeText = {(longitude) => this.setState({longitude})}
                    />
                </View>
            </View>
        </View>
    );
  }

  //realtime firebase listener
  listener = db.collection('locations').onSnapshot(snapshot => {
    let changes = snapshot.docChanges();
    changes.forEach(change => {
        console.log(change.doc.id);
        console.log(this.state.listening_location)
            if(change.doc.id == this.state.listening_location) {
                if (change.doc.data().longitude/10 > 1 || change.doc.data().longitude/10 < -1 || change.doc.data().lattitude/10 > 1 || change.doc.data().lattitude/10 < -1){
                    this.setState({count: "This location is too far away to listen to"})
                } else {
                    this.setState({count: change.doc.data().count})
                }
            }
        })
    })
}

//random styles stuff
const styles = StyleSheet.create({
 container: {
   flex: 1,
   backgroundColor: '#fff',
   alignItems: 'center',
   justifyContent: 'center',
 },
 input: {
     width: 20,
 },
 numberSize: {
     fontSize: 50,
 }
});

