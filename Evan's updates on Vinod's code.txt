import React from 'react';
import { TouchableOpacity,TouchableHighlight,Vibration,Animated,Alert, StyleSheet, Text, View, Dimensions, Button, Image } from 'react-native';
import MapView,{ Marker, PROVIDER_GOOGLE } from 'react-native-maps';
import { createSwitchNavigator, createStackNavigator } from 'react-navigation';
import {Constants, Location, Permissions} from 'expo';
import { white } from 'ansi-colors';
import * as math from 'mathjs';
import * as firebase from 'firebase';
import 'firebase/firestore';


// Initialize Firebase
const firebaseConfig = {
  apiKey: "AIzaSyD2YhfO1TBYNOAWSxGwXQocAikqLuCRl7Q",
  authDomain: "testing-617da.firebaseapp.com",
  databaseURL: "https://testing-617da.firebaseio.com",
  projectId: "testing-617da",
  storageBucket: "testing-617da.appspot.com",
    //messagingSenderId: "862420802331"
};

firebase.initializeApp(firebaseConfig);
const db = firebase.firestore();

//import Panel from './components/Panel';  // Step 1

let id = 0;

function getRandomInt(min,max) {
  min = Math.ceil(min);
  max = Math.floor(max);
  return Math.floor(Math.random() * (max-min))+min;
}

export default class App extends React.Component {

  constructor(props) {
    super(props);
    this.state = { 
      pressStatus: false,
      showStatus: false,
      infoPage: false,
      animatedFlex: new Animated.Value(.5),
      animatedHeight: new Animated.Value(30),
      animatedTop: new Animated.Value(1000),
      locationResult:null,
      testtest:null,
      markers: [
      /*{coordinate: {latitude:42.277053,
          longitude:-83.739496,},
        cost: 0,
        address: 'Mason Hall',
        key: 0,
      },
      {coordinate: {latitude:42.275564,
        longitude:-83.737175,},
        cost: 0,
        address: 'Shapiro',
        key: 1,
      }*/],
      markerIDs: [/*'Mason Hall', 'Shapiro'*/],
      aboveMarkers: [],
      latitude: null,
      longitude: null,
      error: null,
      testMarker: {
        coordinate: {latitude:78, longitude: 78},
        cost: 0,
        title: "kasdd",
      },
      testString: null,
    };


    this.onLongPressMap = this.onLongPressMap.bind(this);
    this.onPressMap = this.onPressMap.bind(this);
    this.handlePress = this.handlePress.bind(this);
    //this.componentDidMount = this.componentDidMount.bind(this);
    this._getLocationAsync = this._getLocationAsync.bind(this);
    this.closePopUp = this.closePopUp.bind(this);
    this.addLit = this.addLit.bind(this);
    this.toggleInfoPage = this.toggleInfoPage.bind(this);
  }

  // addMarker(region) {
  //   let now = (new Date).getTime();

  //   if (this.state.ladAddedMarker > now - 5000) {
  //     return;
  //   }
    
  //   this.setState({
  //     markers: [
  //       ...this.state.markers, {
  //         coordinate: region,
  //         key: id++
  //       }
  //     ],
  //     ladAddedMarker: now
  //   });
  // }

  componentWillMount() {
    this._getLocationAsync();
    this._reverseLocationAsync();
    //ADDED THIS FUNCTION
    this.loadLocationsAsync();
    // navigator.geolocation.getCurrentPosition(
    //   (position) => {
    //     this.setState({
    //       latitude: position.coords.latitude,
    //       longitude: position.coords.longitude,
    //       error: null,
    //     });
    //   },
    //   (error) => this.setState({error: error.message}),
    //   { enableHighAccuracy: true, timeout: 20000, maximumAge: 1000}
    // );
  }

  _getLocationAsync = async() => {
    let{ status } = await Permissions.askAsync(Permissions.LOCATION);
    if (status !== 'granted') {
      this.setState({
        locationResult:'Permission to access location was deinied',
      });
    }

    let location = await Location.getCurrentPositionAsync({enableHighAccuracy: false});
    console.log("I AM DONE");
    this.setState({locationResult:JSON.stringify(location)});

    var initialPosition = {
      latitude: JSON.parse(this.state.locationResult).coords.latitude,
      longitude: JSON.parse(this.state.locationResult).coords.longitude
    }

    var initialRegion = {
      latitude: JSON.parse(this.state.locationResult).coords.latitude,
      longitude: JSON.parse(this.state.locationResult).coords.longitude,
      latitudeDelta: 0.01,
      longitudeDelta: 0.01,
    }

    this.map.animateToRegion(initialRegion, 1);

    this.setState(previousState => (
      { testMarker: {
        coordinate: initialPosition,
        cost: previousState.testMarker.cost,
      }}
    ));

    myApiKey = 'AIzaSyBkwazID1O1ryFhdC6mgSR4hJY2-GdVPmE';
    fetch('https://maps.googleapis.com/maps/api/geocode/json?address=' + this.state.testMarker.coordinate.latitude + ',' + this.state.testMarker.coordinate.longitude + '&key=' + myApiKey)
        .then((response) => response.json())
        .then((responseJson) => {
            this.setState({testString:JSON.parse(JSON.stringify(responseJson)).results[0].formatted_address});
    })
  };

  _reverseLocationAsync = async() => {
    let regionName =  await Location.reverseGeocodeAsync({latitude:42.275863,longitude:-83.72695});
    this.setState({testtest:JSON.stringify(regionName)});
  }

  loadLocationsAsync = async() => {
    var query = db.collection('locations').get()
      .then(snapshot => {
        snapshot.forEach(doc => {
          var index = this.state.markerIDs.indexOf(doc.id);
          if(index > -1) {
            let newArray = [...this.state.markers];
            newArray[index].cost = doc.data().count;
            this.setState({markers: newArray});
            console.log('hello');
          }
        })
        this.render();
        console.log(this.state.markers);
      })
    .catch(err => {
      console.log('Error getting documents', err);
    })
  }

  onLongPressMap() {

    if (!this.state.pressStatus) {
      Animated.timing(this.state.animatedFlex, {
        toValue: 1,
        duration: 250
      }).start();
    } else {
      Animated.timing(this.state.animatedFlex, {
        toValue: .5,
        duration: 250
      }).start();
    }
    this.setState(previousState => (
      { pressStatus: !previousState.pressStatus }
    ))

  }

  toggleInfoPage() {
    if (!this.state.infoPage) {
      Animated.timing(this.state.animatedTop, {
        toValue: 50,
        friction: 100,
        duration: 300
      }).start();
    } else {
      Animated.timing(this.state.animatedTop, {
        toValue: 1000,
        friction: 100,
        duration: 200
      }).start();
    }
    this.setState(previousState => (
      { infoPage: !previousState.infoPage }
    ))

  }

  handlePress() {
      if (!this.state.showStatus) {
        Animated.spring(this.state.animatedHeight, {
          toValue: 80,
          friction: 4
        }).start();
      } 

      this.setState(previousState => (
        { showStatus: !previousState.showStatus }
      ))
  }

  closePopUp() {
    if (this.state.showStatus) {
      Animated.timing(this.state.animatedHeight, {
        toValue: 0,
        duration: 100
      }).start();
    }
  }

  //UPDATED THIS TO WORK WITH DATABASE
  addLit(index) {
    var updated = false;
    var ref = db.collection('locations').doc(this.state.markers[index].address);
    var transaction = db.runTransaction(t = (event) => {
        return event.get(ref)
        .then(doc => {
          var newCount = doc.data().count +1;
          event.update(ref, { count: newCount});
          updated = true;
        })
    })
    .catch(err => {
            console.log('Error getting document', err);
    })
  }

  //UPDATED THIS TO WORK WITH DATBASE
  deleteLit(index) {
    console.log('Pressed')
    var updated = false;
    var ref = db.collection('locations').doc(this.state.markers[index].address);
    var transaction = db.runTransaction(t = (event) => {
        return event.get(ref)
        .then(doc => {
          var newCount = doc.data().count - 1;
          event.update(ref, { count: newCount});
          updated = true;
        })
    })
    .catch(err => {
            console.log('Error getting document', err);
    })
  }


  onPressMap() {

    // navigator.geolocation.getCurrentPosition(location =>
    //   this.setState(previousState => (
    //   { testMarker: {
    //     coordinate: {latitude:location.coords.latitude, longitude: location.coords.longitude},
    //     cost: previousState.testMarker.cost,
    //   }}
    // )));
    console.log("asdad")
    myApiKey = 'AIzaSyBkwazID1O1ryFhdC6mgSR4hJY2-GdVPmE';
    fetch('https://maps.googleapis.com/maps/api/geocode/json?address=' + this.state.testMarker.coordinate.latitude + ',' + this.state.testMarker.coordinate.longitude + '&key=' + myApiKey)
        .then((response) => response.json())
        .then((responseJson) => {
            console.log(JSON.parse(JSON.stringify(responseJson)).results[0].formatted_address);
            this.setState({testString:JSON.parse(JSON.stringify(responseJson)).results[0].formatted_address});
            alert('ADDRESS GEOCODE is BACK!! => ' + JSON.parse(JSON.stringify(responseJson)).results[0].formatted_address);
    })

    this.setState(previousState => (
      { testMarker: {
        coordinate: previousState.testMarker.coordinate,
        cost: previousState.testMarker.cost+1.
      }}
    ))
  }


  render() {
    console.log('render called')
    return (

      <View style = {styles.bigContainer}>        
        <MapView
          ref={ref => { this.map = ref; } }            
          zoomEnabled = {false}
          // provider = "google"
          followsUserLocation = {true}
          // onLongPress = {this.onLongPressMap}
          // onPress =  {this.closePopUp}
          style={styles.container}
          initialRegion = {{
            latitude:37.7884459,
            longitude:-122.4066252,
            latitudeDelta: 0.02,
            longitudeDelta: 0.02,
          }}
        > 
          {this.state.markers.map((marker) => {
            return (
              <MapView.Marker 
              {...marker} 
              onPress={this.handlePress} 
              //ref={ref => { this.markere = ref; } }
              >
                <View style={styles.marker} >
                    <Text style={styles.text}>{marker.cost}</Text>
                </View>

                  <MapView.Callout tooltip style={styles.test}>
                    <Button style={styles.marker} title = '💩' onPress = {()=>this.deleteLit(marker.key)} />
                    <Button style={styles.marker} title = '🔥' onPress = {()=>this.addLit(marker.key)} />
                    <Text>|</Text>
                    <Button style={styles.marker} title = 'ⓘ' onPress={this.toggleInfoPage} />
                  </MapView.Callout>
                
              </MapView.Marker>
            )
          })}

          </MapView>


          <Animated.View style={{...styles.infoPage,top:this.state.animatedTop}}>
            <Button style={styles.marker} title = 'X' onPress={this.toggleInfoPage} />
            <Text>Analytics</Text>
          </Animated.View>
          
        </View>
    );
  }
  //ADDED THIS LISTENER FOR REAL TIME UPDATES
  listener = db.collection('locations').onSnapshot(snapshot => {
    let changes = snapshot.docChanges();
    changes.forEach(change => {
      if(change.type == 'added' && !this.state.markerIDs.includes(change.doc.id)){
        console.log('added');
        let newArray = [...this.state.markers];
        let newids = [...this.state.markerIDs];
        newArray.push({
            coordinate: {
              lattitude: change.doc.data().lattitude,
              longitude: change.doc.data().longitude
            },
            cost: change.doc.data().count,
            address: change.doc.id,
            key: newArray.length
        })
        newids.push(change.doc.id);
        this.setState({markers: newArray});
        this.setState({markerIDs: newids});
      } 
      else if(change.type == 'modified'){
        console.log('modified');
        var index = this.state.markerIDs.indexOf(change.doc.id);
        if(index > -1) {
          let newArray = [...this.state.markers];
          newArray[index].cost = change.doc.data().count;
          this.setState({markers: newArray});
        }
        // else {
        //   let newArray = [...this.state.markers];
        //   let newids = [...this.state.markerIDs];
        //   newArray.push({
        //       coordinate: {
        //         lattitude: change.doc.data().lattitude,
        //         longitude: change.doc.data().longitude
        //       },
        //       cost: change.doc.data().count,
        //       address: change.doc.id,
        //       key: newArray.length
        //   })
        //   newids.push(change.doc.id);
        //   this.setState({markers: newArray});
        //   console.log(this.markers);
        //   console.log(this.markerIDs);
        // }
      }
      else {
        console.log('deleted');
        var index = this.state.markerIDs.indexOf(change.doc.id);
        if(index > -1) {
          let newArray = [...this.state.markers];
          newArray.splice(index,1);
          this.setState({markers: newArray});
        }
      }
    })
  })
}
//this.marker.hideCallout();
const styles = StyleSheet.create({

  container: {
    justifyContent: 'center',
    flex:1
  },
  findMeButton: {
    alignSelf: 'flex-start',
    position: 'absolute',
    top:0,
  },
  infoPage: {
    height: '90%',
    width: '90%',
    position: 'absolute',
    top:50,
    alignSelf:'center',
    borderColor:'black',
    borderWidth: 2,
    borderRadius: 15,
    backgroundColor: 'white',
    flex:1,
    flexDirection:'column',
    justifyContent:'flex-start',
    alignItems:'center'
  },
  touch: {
    backgroundColor: 'yellow',
    flex: 1,
    width: 100,
    height: 900
  },
  animView: {
    backgroundColor:'blue',
    flex:.5,
    borderBottomColor:'black',
    borderBottomWidth: 5,
  },
  bigContainer: {
    flex:1,
    flexDirection: 'column',
    justifyContent:'flex-start',
  },
  locationText: {
    marginTop:10,
    alignSelf: 'center',
    fontSize: 20,
  },
  marker: {
    padding: 5,
    borderRadius: 5,
    backgroundColor:"red",
    flexDirection:"column",
    justifyContent: "center"


  },
  marker2: {
    backgroundColor: "green",
    borderRadius: 5,
    height:30,
    width: 60,
    // flexDirection: 'row',
    // justifyContent: 'space-between',
  },
  test: {
    flex:1,
    flexDirection:'row',
    justifyContent: 'space-evenly',
    width: 100,
    height: 40,
    alignItems: 'center',
    backgroundColor:"white",
    borderColor:'black',
    borderWidth: 2,
    borderRadius: 10
  },
  markerContainer: {
    flex:1,
    flexDirection:'row',
    justifyContent: 'flex-start',
    alignItems: 'center',
    backgroundColor:"red"
  },
  text: {
    color: "#FFF",
    fontWeight: "bold",
    fontSize: 20
  },
});

